{"version":3,"sources":["components/CharacterCard/index.js","components/Header/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","key","id","className","onClick","userClicks","alt","name","src","image","width","height","Header","score","wins","losses","highScore","Title","children","shuffleImages","array","i","length","k","Math","floor","random","j","App","state","characters","clickedImgs","indexOf","push","incrementScore","charaShuffle","alert","setState","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+uEAgBeA,MAbf,SAAuBC,GACnB,OAEI,yBAAKC,IAAKD,EAAME,GAAIC,UAAU,6BAA6BC,QAAS,kBAAMJ,EAAMK,WAAWL,EAAME,MAE/F,yBAAKI,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,MAAOC,MAAM,QAAQC,OAAO,YCOxDC,G,MAZA,SAAAZ,GAAK,OAChB,yBAAKE,GAAG,SAASC,UAAU,cACvB,uCACA,yBAAKA,UAAU,SACf,yCAAeH,EAAMa,OACrB,wCAAcb,EAAMc,MACpB,0CAAgBd,EAAMe,QACrB,8CAAoBf,EAAMgB,e,MCFpBC,MALf,SAAejB,GACX,OAAO,wBAAIG,UAAU,SAASH,EAAMkB,SAAS,yE,OCO3CC,EAAgB,SAAAC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAIP,EAAMG,GAEdH,EAAMG,GAAKH,EAAMC,GACjBD,EAAMC,GAAKM,EAGb,OAAOP,GAoFMQ,E,2MA9EbC,MAAQ,CACNC,aACAC,YAAa,GACbjB,KAAM,EACNC,OAAQ,EACRC,UAAW,EACXH,MAAO,G,EAGXR,WAAa,SAACH,GACZ,IAAI6B,EAAc,EAAKF,MAAME,YACzBlB,EAAQ,EAAKgB,MAAMhB,MACnBG,EAAY,EAAKa,MAAMb,WAIM,IAA7Be,EAAYC,QAAQ9B,IACtB6B,EAAYE,KAAK/B,GACjB,EAAKgC,iBACL,EAAKC,gBAEuB,KAArB,EAAKN,MAAMhB,OAClBuB,MAAM,qCACN,EAAKC,SAAS,CACZxB,MAAO,EACPC,KAAM,EACNiB,YAAa,OAOf,EAAKM,SAAS,CACZxB,MAAO,EACPkB,YAAa,KAEfK,MAAM,wFAEHvB,EAAQG,GACb,EAAKqB,SAAS,CAAErB,UAAWH,K,EAI7BqB,eAAiB,WACf,EAAKG,SAAS,CAAExB,MAAO,EAAKgB,MAAMhB,MAAQ,K,EAG5CsB,aAAe,WACb,EAAKE,SAAS,CAAEP,WAAYX,EAAcW,M,wEAGhC,IAAD,OACP,OAEE,6BACE,kBAAC,EAAD,CACAjB,MAAOyB,KAAKT,MAAMhB,MAClBG,UAAWsB,KAAKT,MAAMb,UACtBF,KAAMwB,KAAKT,MAAMf,KACjBC,OAAQuB,KAAKT,MAAMd,SAEnB,kBAAC,EAAD,MACDuB,KAAKT,MAAMC,WAAWS,IAAI,SAAAT,GAAU,OACjC,kBAAC,EAAD,CACA7B,IAAK6B,EAAW5B,GAChBK,KAAMuB,EAAWvB,KACjBE,MAAOqB,EAAWrB,MAClBJ,WAAY,EAAKA,WACjBH,GAAI4B,EAAW5B,Y,GAvEPsC,aCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fa6c3f39.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction CharacterCard(props) {\n    return (\n    \n        <div key={props.id} className=\"card col-md-3 cupheadChara\" onClick={() => props.userClicks(props.id)}>\n          \n          <img alt={props.name} src={props.image} width=\"175px\" height=\"175px\" />\n          {/* onClick={() => props.shuffleImages(props.id)} className=\"shuffleImages\" */}\n          \n        </div>\n    \n    );\n}\n\nexport default CharacterCard;\n\n///card div around img-container div to create card around each image. ","import React from \"react\";\nimport \"./style.css\";\n\nconst Header = props => (\n    <div id=\"header\" className=\"gameHeader\">\n        <h1>CupHead</h1>\n        <div className=\"stats\">\n        <label>Score: {props.score}</label>\n        <label>Wins: {props.wins}</label>\n        <label>Losses: {props.losses}</label>\n         <label>High Score: {props.highScore}</label>\n        </div>\n    </div>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n    return <h1 className=\"title\">{props.children}<p>Try not to click the same picture twice!</p></h1>;\n    \n}\n\nexport default Title;\n\n","import React, { Component }from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport CharacterCard from \"./components/CharacterCard\";\nimport Header from \"./components/Header\"\n// import Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport characters from \"./characters.json\"\n\n\n\nconst shuffleImages = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let k = Math.floor(Math.random() * (i + 1));\n    let j = array[k];\n\n    array[k] = array[i]\n    array[i] = j\n  }\n\n  return array;\n}\n\n\nclass App extends Component {\n  //setting this.state.characters to characters json array\n  state = {\n    characters,\n    clickedImgs: [],\n    wins: 0,\n    losses: 0,\n    highScore: 0,\n    score: 0\n  };\n\nuserClicks = (id) => {\n  let clickedImgs = this.state.clickedImgs;\n  let score = this.state.score;\n  let highScore = this.state.highScore;\n  // console.log(shuffleImages)\n  \n\n  if (clickedImgs.indexOf(id) === -1) {\n    clickedImgs.push(id);\n    this.incrementScore();\n    this.charaShuffle();\n  } \n  else if (this.state.score === 12 ){\n    alert(\"You Win 🥳 🏆\");\n    this.setState({ \n      score: 0,\n      wins: 1,\n      clickedImgs: []\n    });\n\n    //getting all 12 images correct works, but it adds the highscore up not score\n    //score now increaments as you click a correct image, need to work on highscore and wins/losses\n    //at the moment score and highscore both ++ when clicked. \n  } else {\n    this.setState({\n      score: 0,\n      clickedImgs: []\n    });\n    alert(\"I won't sugarcoat it...you never stood a chance! - Baroness Von Bon Bon, Try Again!\")\n  } \n  if ( score > highScore) {\n  this.setState({ highScore: score })\n} \n};\n\nincrementScore = () => {\n  this.setState({ score: this.state.score + 1 });\n};\n\ncharaShuffle = () => {\n  this.setState({ characters: shuffleImages(characters)})\n};\n\n  render() {\n    return (\n\n      <div>\n        <Header\n        score={this.state.score}\n        highScore={this.state.highScore}\n        wins={this.state.wins}\n        losses={this.state.losses}\n        />\n        <Title />\n      {this.state.characters.map(characters => (\n          <CharacterCard\n          key={characters.id}\n          name={characters.name}\n          image={characters.image}\n          userClicks={this.userClicks}\n          id={characters.id}\n          />\n        ))}\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}